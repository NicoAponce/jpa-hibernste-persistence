package main;import entities.*;import javax.persistence.EntityManager;import javax.persistence.EntityManagerFactory;import javax.persistence.Persistence;import java.util.ArrayList;import java.util.Date;import java.util.List;public class PersistenceApp {    public static final String PERSISTENCE_NAME = "PersistenceAppPU";    public static void main(String[] args) {        EntityManagerFactory managerFactory = Persistence.createEntityManagerFactory(PERSISTENCE_NAME);        EntityManager entityManager = managerFactory.createEntityManager();        try {            entityManager.getTransaction().begin();            List<Category> categories = new ArrayList<>();            categories.add(Category.builder()                    .name("Soda")                    .build());            Article article = Article.builder()                    .name("Coca-Cola")                    .stock(100)                    .price(99)                    .categories(categories)                    .build();            Home home = Home.builder()                    .name("Los alamos")                    .number("N° 199")                    .build();            Client client = Client.builder()                    .name("Nicolas")                    .lastName("Gomez")                    .dni("87654321")                    .age(25)                    .home(home)                    .build();            Invoice invoice= Invoice.builder()                    .date(new Date())                    .number("N° 001")                    .client(client)                    .build();            Detail detail= Detail.builder()                    .quantity(78)                    .subtotal(article.getPrice())                    .article(article)                    .invoice(invoice)                    .build();            invoice.setTotal(article.getPrice()*detail.getQuantity());            entityManager.persist(detail);            entityManager.flush();            entityManager.getTransaction().commit();        } catch (Exception e) {            entityManager.getTransaction().rollback();        }        entityManager.close();        managerFactory.close();    }}